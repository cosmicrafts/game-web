{"version":3,"sources":["../../src/components/Code.js"],"names":["Stx","styled","span","TX","children","slice","Sacc","props","mode","hexColors","light","A","B","C","D","E","F","dark","ACC","short","color","a","toUpperCase","split","map","x","idx","b","c","Spri","PRI","p","Snfta","NFTA","Sanv","ANV","val","AccountIdentifier","eToAnv","toString","Spwr","PWR","e8sToPwr","Sicp","ICP","digits","icpCycles","BigInt","state","user","oracle","xdr","Number","e8sToIcp","substring","toFixed","Shash","HASH","t","txt","Math","floor"],"mappings":"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","sourcesContent":["/* global BigInt */\nimport React, { useEffect, useState } from \"react\";\n\nimport styled from \"@emotion/styled\";\nimport * as AccountIdentifier from \"@vvv-interactive/nftanvil-tools/cjs/accountidentifier.js\";\n\nimport {\n  useAnvilSelector as useSelector,\n  useAnvilDispatch as useDispatch,\n} from \"../index.js\";\n\nimport { Tooltip } from \"@chakra-ui/react\";\nimport { useColorModeValue } from \"@chakra-ui/react\";\nconst Stx = styled.span`\n  font-family: Hexaframe;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  color: rgb(117, 130, 149);\n  b {\n    color: rgb(110, 200, 170);\n  }\n`;\n\nexport const TX = ({ children }) => {\n  return (\n    <Stx>\n      <b>TX</b>\n      {children.slice(2)}\n    </Stx>\n  );\n};\n\nconst Sacc = styled.span`\n  font-family: Hexaframe;\n  font-size: 80%;\n  letter-spacing: 2px;\n  text-transform: uppercase;\n  color: ${(props) =>\n    props.mode === \"light\" ? \"rgb(230, 240, 240)\" : \"rgb(90, 100, 100)\"};\n  b {\n    color: rgb(170, 255, 0);\n  }\n`;\n\nconst hexColors = {\n  light: {\n    0: \"#49fc32\",\n    1: \"#a7ef15\",\n    2: \"#e8dc16\",\n    3: \"#ffbb33\",\n    4: \"#ff906c\",\n    5: \"#ff87b3\",\n    6: \"#ff92ff\",\n    7: \"#ffa9ff\",\n    8: \"#c8c8ff\",\n    9: \"#00e4ff\",\n    A: \"#00f3ff\",\n    B: \"#29f7db\",\n    C: \"#c9e1bb\",\n    D: \"#ffc8d1\",\n    E: \"#e8cfff\",\n    F: \"#cdd9fd\",\n  },\n  dark: {\n    0: \"#219812\",\n    1: \"#6f9f0d\",\n    2: \"#8c8509\",\n    3: \"#946507\",\n    4: \"#902705\",\n    5: \"#840835\",\n    6: \"#8e088e\",\n    7: \"#950b95\",\n    8: \"#09098b\",\n    9: \"#097b88\",\n    A: \"#07757a\",\n    B: \"#067969\",\n    C: \"#38850b\",\n    D: \"#a41d33\",\n    E: \"#4e1187\",\n    F: \"#153081\",\n  },\n};\n\nexport const ACC = ({ children, short = false }) => {\n  const mode = useColorModeValue(\"dark\", \"light\");\n  const color = hexColors[mode];\n\n  let a = children\n    .slice(0, 5)\n    .toUpperCase()\n    .split(\"\")\n    .map((x, idx) => (\n      <span key={idx} style={{ color: color[x] }}>\n        {x}\n      </span>\n    ));\n  let b = children.slice(5, -5);\n  let c = children\n    .slice(-5)\n    .toUpperCase()\n    .split(\"\")\n    .map((x, idx) => (\n      <span key={idx} style={{ color: color[x] }}>\n        {x}\n      </span>\n    ));\n\n  return (\n    <Sacc mode={mode}>\n      <b>{a}</b>\n      {short ? \"...\" : b}\n      <b>{c}</b>\n    </Sacc>\n  );\n};\n\nconst Spri = styled.span`\n  font-family: Hexaframe;\n  font-size: 80%;\n  letter-spacing: 2px;\n  text-transform: uppercase;\n  color: rgb(220, 220, 220);\n  b {\n    color: rgb(220, 220, 220);\n  }\n`;\n\nexport const PRI = ({ children }) => {\n  let p = children.split(\"-\");\n  return (\n    <Spri>\n      {p.map((x, idx) => {\n        return (\n          <span key={idx}>\n            {idx !== 0 ? \"-\" : null}\n            <b>{x}</b>\n          </span>\n        );\n      })}\n    </Spri>\n  );\n};\n\nconst Snfta = styled.span`\n  font-family: Hexaframe;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  color: rgb(117, 130, 149);\n  b {\n    color: rgb(250, 0, 120);\n  }\n`;\n\nexport const NFTA = ({ children }) => {\n  if (!children)\n    return (\n      <Snfta>\n        <b>NFTA</b>\n      </Snfta>\n    );\n  return (\n    <Snfta>\n      <b>NFTA</b>\n      {children.slice(4)}\n    </Snfta>\n  );\n};\n\nconst Sanv = styled.span`\n  font-family: Hexaframe;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  color: rgb(220, 80, 255);\n  span {\n    color: rgb(160, 0, 255);\n    vertical-align: super;\n    font-size: 8px;\n    position: relative;\n    top: 0.1em;\n  }\n  b {\n    color: rgb(160, 40, 250);\n  }\n`;\n\nexport const ANV = ({ children }) => {\n  if (!children)\n    return (\n      <Sanv>\n        <b>ANV</b>\n      </Sanv>\n    );\n  let val = AccountIdentifier.eToAnv(children);\n  let [a, b] = val.toString().split(\".\");\n  return (\n    <Sanv>\n      {a}.<span>{b}</span> <b>ANV</b>\n    </Sanv>\n  );\n};\n\nconst Spwr = styled.span`\n  font-family: Hexaframe;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  color: rgb(220, 80, 255);\n  span {\n    color: rgb(160, 0, 255);\n    vertical-align: super;\n    font-size: 8px;\n    position: relative;\n    top: 0.1em;\n  }\n  b {\n    color: rgb(160, 40, 250);\n  }\n`;\n\nexport const PWR = ({ children }) => {\n  if (!children)\n    return (\n      <Spwr>\n        <b>PWR</b>\n      </Spwr>\n    );\n  let val = AccountIdentifier.e8sToPwr(children);\n  let [a, b] = val.toString().split(\".\");\n  return (\n    <Spwr>\n      {a}.<span>{b}</span> <b>PWR</b>\n    </Spwr>\n  );\n};\n\nconst Sicp = styled.span`\n  font-family: Hexaframe;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  color: rgb(120, 200, 255);\n  span {\n    color: rgb(60, 160, 230);\n    vertical-align: super;\n    font-size: 8px;\n    position: relative;\n    top: 0.1em;\n  }\n  b {\n    color: rgb(0, 160, 250);\n  }\n`;\n\nexport const ICP = ({ children, digits = 4 }) => {\n  const icpCycles = BigInt(useSelector((state) => state.user.oracle.icpCycles));\n\n  if (!children)\n    return (\n      <Sicp>\n        <b>ICP</b>\n      </Sicp>\n    );\n\n  const xdr = Number((BigInt(children) * icpCycles) / 10000000000n) / 100;\n\n  let val = AccountIdentifier.e8sToIcp(children);\n  let [a, b] = val.toString().split(\".\");\n  b = b.substring(0, digits);\n  return (\n    <Tooltip hasArrow placement=\"left\" label={`${xdr.toFixed(2)} XDR`}>\n      <Sicp>\n        {a}.<span>{b}</span> <b>ICP</b>\n      </Sicp>\n    </Tooltip>\n  );\n};\n\nconst Shash = styled.span`\n  font-family: Hexaframe;\n  font-size: 8px;\n  letter-spacing: 2px;\n  text-transform: uppercase;\n  color: ${(props) =>\n    props.mode === \"light\" ? \"#377a5f\" : \"rgb(110, 200, 170)\"};\n\n  b {\n    color: ${(props) =>\n      props.mode === \"light\" ? \"#005e47\" : \"rgb(140, 240, 220)\"};\n  }\n`;\n\nexport const HASH = ({ children, short = false }) => {\n  const mode = useColorModeValue(\"light\", \"dark\");\n  let t = short\n    ? (children = children.slice(0, 4) + \"..\" + children.slice(-4))\n    : children;\n\n  let txt = t\n    .split(\"\")\n    .map((x, idx) => (Math.floor(idx / 2) % 2 == 0 ? <b key={idx}>{x}</b> : x));\n  return <Shash mode={mode}>{txt}</Shash>;\n};\n"],"file":"Code.js"}