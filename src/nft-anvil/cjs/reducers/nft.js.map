{"version":3,"sources":["../../src/reducers/nft.js"],"names":["nftSlice","name","initialState","reducers","nftSet","state","action","payload","id","meta","actions","nft_fetch","dispatch","getState","identity","authentication","client","getIdentity","s","tid","index","slot","canister","user","map","space","toText","nftcan","agentOptions","getAgentOptions","resp","metadata","Error","err","JSON","stringify","bearer","data","vars","ok","now","Math","ceil","Date","AccountIdentifier","ArrayToText","tokenIndex","domain","thumb","content","created","quality","lore","custom","length","author","secret","entropy","attributes","transfer","authorShare","tags","ttl","cooldownUntil","boundUntil","pwr","pwrOps","toString","pwrStorage","sockets","x","price","amount","history","rechargeable","transferable","unrestricted","bindsDuration","internal","url","ipfs","cid","subaccount","TextToArray","filter","Boolean","nft_media_get","contentType","size","position","src","nft_fetch_file","nft","chunkSize","chunks","Promise","all","Array","fill","_","chunkIdx","fetch_chunk","then","blob","Blob","chunk","Uint8Array","buffer","type","URL","createObjectURL","nft_purchase","address","console","log","TextToSlot","prez","BigInt","token","affiliate","nft_set_price","t","set_price","nft_transfer","toAddress","from","to","memo","transactionId","nft_plug","plug_id","socket_id","plug","socket","nft_unsocket","unsocket","nft_recharge","e","error","nft_burn","rez","burn","nft_approve","spender","approve","allowance","nft_use","use","r","customVar","nft_transfer_link","key","hash","transfer_link","code","nft_claim_link","claim_link","nft_enter_code","nft_recharge_quote","icpCycles","oracle","ops","pwrFee","storage","full","current","diff","nft_mint_quote","vals","nft_mint","key_nftstorage","available","nft_avail","floor","random","canisterId","mrez","OutOfMemory","InsufficientBalance","reducer"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAQA;;AACA;;AAQA;;AACA;;AACA;;AACA;;AAKA;;AAEA;;;;;;;;AA9BA;AAgCO,MAAMA,QAAQ,GAAG,0BAAY;AAClCC,EAAAA,IAAI,EAAE,KAD4B;AAElCC,EAAAA,YAAY,EAAE,EAFoB;AAGlCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzB,aAAO,EACL,GAAGD,KADE;AAEL,SAACC,MAAM,CAACC,OAAP,CAAeC,EAAhB,GAAqBF,MAAM,CAACC,OAAP,CAAeE;AAF/B,OAAP;AAID;AANO;AAHwB,CAAZ,CAAjB;;AAaA,MAAM;AAAEL,EAAAA;AAAF,IAAaJ,QAAQ,CAACU,OAA5B;;;AAEA,MAAMC,SAAS,GAAIH,EAAD,IAAQ,OAAOI,QAAP,EAAiBC,QAAjB,KAA8B;AAAA;;AAC7D,MAAIC,QAAQ,GAAGC,cAAeC,MAAf,CAAsBC,WAAtB,EAAf;;AACA,MAAIC,CAAC,GAAGL,QAAQ,EAAhB;AAEA,MAAIM,GAAG,GAAG,0BAAcX,EAAd,CAAV;AACA,MAAI;AAAEY,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAkB,0BAAcF,GAAd,CAAtB;AACA,MAAIG,QAAQ,GAAG,kCAAkBJ,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWC,KAA7B,EAAoCJ,IAApC,EAA0CK,MAA1C,EAAf;AAEA,MAAIC,MAAM,GAAG,sBAAYL,QAAZ,EAAsB;AACjCM,IAAAA,YAAY,EAAEb,cAAec,eAAf;AADmB,GAAtB,CAAb;AAIA,MAAIC,IAAI,GAAG,MAAMH,MAAM,CAACI,QAAP,CAAgBZ,GAAhB,CAAjB;AACA,MAAI,CAACW,IAAL,EAAW,MAAME,KAAK,CAAC,sBAAD,CAAX;AACX,MAAIF,IAAI,CAACG,GAAT,EACE,MAAMD,KAAK,CAAC,6BAA6BE,IAAI,CAACC,SAAL,CAAeL,IAAI,CAACG,GAApB,CAA9B,CAAX;AAEF,MAAI;AAAEG,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA;AAAhB,MAAyBR,IAAI,CAACS,EAAlC;AACA,MAAIC,GAAG,GAAGC,IAAI,CAACC,IAAL,CAAUC,IAAI,CAACH,GAAL,KAAa,IAAb,GAAoB,EAA9B,CAAV;AAEA,MAAI/B,IAAI,GAAG;AACT2B,IAAAA,MAAM,EAAEQ,iBAAiB,CAACC,WAAlB,CAA8BT,MAA9B,CADC;AAGT;AACAU,IAAAA,UAAU,EAAE1B,KAJH;AAKTE,IAAAA,QALS;AAOT;AAEAyB,IAAAA,MAAM,EAAEV,IAAI,CAACU,MAAL,CAAY,CAAZ,CATC;AAUT;AACA;AACAC,IAAAA,KAAK,EAAEX,IAAI,CAACW,KAZH;AAaTC,IAAAA,OAAO,EAAEZ,IAAI,CAACY,OAAL,CAAa,CAAb,CAbA;AAcTC,IAAAA,OAAO,EAAEb,IAAI,CAACa,OAdL;AAeTC,IAAAA,OAAO,EAAEd,IAAI,CAACc,OAfL;AAgBTC,IAAAA,IAAI,EAAEf,IAAI,CAACe,IAAL,CAAU,CAAV,CAhBG;AAiBTnD,IAAAA,IAAI,EAAEoC,IAAI,CAACpC,IAAL,CAAU,CAAV,CAjBG;AAkBToD,IAAAA,MAAM,EAAEhB,IAAI,CAACgB,MAAL,CAAYC,MAlBX;AAmBTC,IAAAA,MAAM,EAAEX,iBAAiB,CAACC,WAAlB,CAA8BR,IAAI,CAACkB,MAAnC,CAnBC;AAoBTC,IAAAA,MAAM,EAAEnB,IAAI,CAACmB,MApBJ;AAqBTC,IAAAA,OAAO,EAAEpB,IAAI,CAACoB,OArBL;AAsBTC,IAAAA,UAAU,EAAErB,IAAI,CAACqB,UAtBR;AAuBTC,IAAAA,QAAQ,EAAEtB,IAAI,CAACsB,QAvBN;AAwBTC,IAAAA,WAAW,EAAEvB,IAAI,CAACuB,WAxBT;AAyBTC,IAAAA,IAAI,EAAExB,IAAI,CAACwB,IAzBF;AA0BT;AACAC,IAAAA,GAAG,EAAExB,IAAI,CAACwB,GAAL,CAAS,CAAT,CA3BI;AA4BTC,IAAAA,aAAa,EAAEzB,IAAI,CAACyB,aAAL,CAAmB,CAAnB,CA5BN;AA6BTC,IAAAA,UAAU,EAAE1B,IAAI,CAAC0B,UAAL,CAAgB,CAAhB,CA7BH;AA8BTC,IAAAA,GAAG,EAAE,CAAC3B,IAAI,CAAC4B,MAAL,CAAYC,QAAZ,EAAD,EAAyB7B,IAAI,CAAC8B,UAAL,CAAgBD,QAAhB,EAAzB,CA9BI;AA+BTE,IAAAA,OAAO,EAAE/B,IAAI,CAAC+B,OAAL,CAAa7C,GAAb,CAAkB8C,CAAD,IAAO,wBAAYA,CAAZ,CAAxB,CA/BA;AA+ByC;AAClDC,IAAAA,KAAK,EAAE,EAAE,GAAGjC,IAAI,CAACiC,KAAV;AAAiBC,MAAAA,MAAM,EAAElC,IAAI,CAACiC,KAAL,CAAWC,MAAX,CAAkBL,QAAlB;AAAzB,KAhCE;AAiCTM,IAAAA,OAAO,EAAEnC,IAAI,CAACmC,OAjCL;AAkCTC,IAAAA,YAAY,EAAErC,IAAI,CAACqC;AAlCV,GAAX;AAqCAjE,EAAAA,IAAI,CAACkE,YAAL,GACElE,IAAI,CAACkD,QAAL,CAAciB,YAAd,KAA+B,IAA/B,IACCnE,IAAI,CAACkD,QAAL,CAAckB,aAAd,IAA+BpE,IAAI,CAACuD,UAAL,GAAkBxB,GAFpD;AAIA,MAAI/B,IAAI,CAACuC,KAAL,CAAW8B,QAAf,EACErE,IAAI,CAACuC,KAAL,CAAW8B,QAAX,CAAoBC,GAApB,GAA0B,qBAAS7D,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWC,KAApB,EAA2BN,GAA3B,EAAgC,OAAhC,CAA1B;AACF,MAAIV,IAAI,CAACuC,KAAL,CAAWgC,IAAf,EAAqBvE,IAAI,CAACuC,KAAL,CAAWgC,IAAX,CAAgBD,GAAhB,GAAsB,yBAAatE,IAAI,CAACuC,KAAL,CAAWgC,IAAX,CAAgBC,GAA7B,CAAtB;AAErB,MAAIC,UAAU,GAAG,CACftC,iBAAiB,CAACuC,WAAlB,CAA8BjE,CAAC,CAACK,IAAF,CAAO2D,UAArC,KAAoD,IADrC,EAEfE,MAFe,CAERC,OAFQ,CAAjB;;AAIA,uBAAI5E,IAAI,CAACwC,OAAT,0CAAI,cAAc6B,QAAlB,EAA4B;AAC1B,QAAIrE,IAAI,CAAC+C,MAAT,EACE/C,IAAI,CAACwC,OAAL,CAAa6B,QAAb,CAAsBC,GAAtB,GAA4B,MAAMO,aAAa,CAACpE,CAAD,EAAI;AACjDV,MAAAA,EADiD;AAEjD+E,MAAAA,WAAW,EAAE9E,IAAI,CAACwC,OAAL,CAAa6B,QAAb,CAAsBS,WAFc;AAGjDC,MAAAA,IAAI,EAAE/E,IAAI,CAACwC,OAAL,CAAa6B,QAAb,CAAsBU,IAHqB;AAIjDC,MAAAA,QAAQ,EAAE,SAJuC;AAKjDP,MAAAA;AALiD,KAAJ,CAA/C,CADF,KAQKzE,IAAI,CAACwC,OAAL,CAAa6B,QAAb,CAAsBC,GAAtB,GAA4B,qBAAS7D,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWC,KAApB,EAA2BN,GAA3B,EAAgC,SAAhC,CAA5B;AACN;;AACD,wBAAIV,IAAI,CAACwC,OAAT,2CAAI,eAAc+B,IAAlB,EACEvE,IAAI,CAACwC,OAAL,CAAa+B,IAAb,CAAkBD,GAAlB,GAAwB,yBAAatE,IAAI,CAACwC,OAAL,CAAa+B,IAAb,CAAkBC,GAA/B,CAAxB;AAEFrE,EAAAA,QAAQ,CAACR,MAAM,CAAC;AAAEI,IAAAA,EAAF;AAAMC,IAAAA;AAAN,GAAD,CAAP,CAAR;AACA,SAAOA,IAAP;AACD,CArFM;;;;AAuFA,MAAM6E,aAAa,GAAG,OAC3BpE,CAD2B,WAGxB;AAAA,MADH;AAAEV,IAAAA,EAAF;AAAM+E,IAAAA,WAAN;AAAmBC,IAAAA,IAAnB;AAAyBC,IAAAA,QAAzB;AAAmCP,IAAAA,UAAU,GAAG;AAAhD,GACG;;AACH,MAAIpE,QAAQ,GAAGC,cAAeC,MAAf,CAAsBC,WAAtB,EAAf;;AAEA,MAAIE,GAAG,GAAG,0BAAcX,EAAd,CAAV;AACA,MAAI;AAAEY,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAkB,0BAAcF,GAAd,CAAtB;AACA,MAAIG,QAAQ,GAAG,kCAAkBJ,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWC,KAA7B,EAAoCJ,IAApC,EAA0CK,MAA1C,EAAf;AAEA,MAAIC,MAAM,GAAG,sBAAYL,QAAZ,EAAsB;AACjCM,IAAAA,YAAY,EAAEb,cAAec,eAAf;AADmB,GAAtB,CAAb;AAIA,MAAI6D,GAAG,GAAG,MAAMC,cAAc,CAC5BhE,MAD4B,EAE5B6D,IAF4B,EAG5BD,WAH4B,EAI5BnE,KAJ4B,EAK5BqE,QAL4B,EAM5BP,UAN4B,CAA9B;AASA,SAAOQ,GAAP;AACD,CAxBM;;;;AA0BP,MAAMC,cAAc,GAAG,gBACrBC,GADqB,EAErBJ,IAFqB,EAGrBD,WAHqB,EAIrBzC,UAJqB,EAKrB2C,QALqB,EAOlB;AAAA,MADHP,UACG,uEADU,KACV;AACH,MAAIW,SAAS,GAAG,OAAO,GAAvB;AACA,MAAIC,MAAM,GAAGrD,IAAI,CAACC,IAAL,CAAU8C,IAAI,GAAGK,SAAjB,CAAb;AAEA,SAAO,MAAME,OAAO,CAACC,GAAR,CACXC,KAAK,CAACH,MAAD,CAAL,CACGI,IADH,CACQ,CADR,EAEG1E,GAFH,CAEO,CAAC2E,CAAD,EAAIC,QAAJ,KAAiB;AACpB,WAAOR,GAAG,CAACS,WAAJ,CAAgB;AACrBvD,MAAAA,UADqB;AAErBsD,MAAAA,QAFqB;AAGrBX,MAAAA,QAAQ,EAAE;AAAE,SAACA,QAAD,GAAY;AAAd,OAHW;AAIrBP,MAAAA,UAAU,EAAEA,UAAU,GAAGA,UAAH,GAAgB;AAJjB,KAAhB,CAAP;AAMD,GATH,CADW,EAWXoB,IAXW,CAWLR,MAAD,IAAY;AACjB,UAAMS,IAAI,GAAG,IAAIC,IAAJ,CACXV,MAAM,CAACtE,GAAP,CAAYiF,KAAD,IAAW;AACpB,aAAO,IAAIC,UAAJ,CAAeD,KAAK,CAAC,CAAD,CAApB,EAAyBE,MAAhC;AACD,KAFD,CADW,EAIX;AAAEC,MAAAA,IAAI,EAAErB;AAAR,KAJW,CAAb;AAOA,WAAOsB,GAAG,CAACC,eAAJ,CAAoBP,IAApB,CAAP;AACD,GApBY,CAAb;AAqBD,CAhCD;;AAkCO,MAAMQ,YAAY,GACvB;AAAA,MAAC;AAAEvG,IAAAA,EAAF;AAAMgE,IAAAA;AAAN,GAAD;AAAA,SACA,OAAO5D,QAAP,EAAiBC,QAAjB,KAA8B;AAC5B,QAAIK,CAAC,GAAGL,QAAQ,EAAhB;;AAEA,QAAIC,QAAQ,GAAGC,cAAeC,MAAf,CAAsBC,WAAtB,EAAf;;AAEA,QAAIE,GAAG,GAAG,0BAAcX,EAAd,CAAV;AACA,QAAI;AAAEa,MAAAA;AAAF,QAAW,0BAAcF,GAAd,CAAf;AAEA,QAAI6F,OAAO,GAAG9F,CAAC,CAACK,IAAF,CAAOyF,OAArB;AACA,QAAI9B,UAAU,GAAG,CACftC,iBAAiB,CAACuC,WAAlB,CAA8BjE,CAAC,CAACK,IAAF,CAAO2D,UAArC,KAAoD,IADrC,EAEfE,MAFe,CAERC,OAFQ,CAAjB;AAIA4B,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB1G,EAAtB,EAA0BgE,MAA1B;AAEA,QAAIP,GAAG,GAAG,sBACR,kCACE/C,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWC,KADb,EAEEmB,iBAAiB,CAACuE,UAAlB,CAA6BH,OAA7B,EAAsC9F,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWyC,GAAjD,CAFF,CADQ,EAKR;AACErC,MAAAA,YAAY,EAAEb,cAAec,eAAf;AADhB,KALQ,CAAV;AAUA,QAAIuF,IAAI,GAAG,MAAMnD,GAAG,CAAC8C,YAAJ,CAAiBM,MAAM,CAAChG,IAAD,CAAvB,EAA+B;AAC9CiG,MAAAA,KAAK,EAAE,0BAAc9G,EAAd,CADuC;AAE9Ce,MAAAA,IAAI,EAAE;AAAEyF,QAAAA,OAAO,EAAEpE,iBAAiB,CAACuC,WAAlB,CAA8B6B,OAA9B;AAAX,OAFwC;AAG9C9B,MAAAA,UAH8C;AAI9CqC,MAAAA,SAAS,EAAE,EAJmC;AAK9C/C,MAAAA;AAL8C,KAA/B,CAAjB;AAQA,QAAI4C,IAAI,CAACnF,GAAT,EAAc,MAAM,IAAID,KAAJ,CAAUE,IAAI,CAACC,SAAL,CAAeiF,IAAI,CAACnF,GAApB,CAAV,CAAN;AAEdrB,IAAAA,QAAQ,CAAC,kCAAD,CAAR;AACAA,IAAAA,QAAQ,CAACD,SAAS,CAACH,EAAD,CAAV,CAAR;AACAyG,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BE,IAA/B;AACD,GAvCD;AAAA,CADK,C,CA0CP;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;;;AAEO,MAAMI,aAAa,GACxB;AAAA,MAAC;AAAEhH,IAAAA,EAAF;AAAM+D,IAAAA;AAAN,GAAD;AAAA,SACA,OAAO3D,QAAP,EAAiBC,QAAjB,KAA8B;AAC5B,QAAIK,CAAC,GAAGL,QAAQ,EAAhB;;AAEA,QAAIC,QAAQ,GAAGC,cAAeC,MAAf,CAAsBC,WAAtB,EAAf;;AACA,QAAIE,GAAG,GAAG,0BAAcX,EAAd,CAAV;AACA,QAAI;AAAEa,MAAAA;AAAF,QAAW,0BAAcF,GAAd,CAAf;AAEA8F,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B1G,EAA7B,EAAiC;AAAEa,MAAAA;AAAF,KAAjC;AAEA,QAAIC,QAAQ,GAAG,kCAAkBJ,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWC,KAA7B,EAAoCJ,IAApC,EAA0CK,MAA1C,EAAf;AAEA,QAAIC,MAAM,GAAG,sBAAYL,QAAZ,EAAsB;AACjCM,MAAAA,YAAY,EAAEb,cAAec,eAAf;AADmB,KAAtB,CAAb;AAIA,QAAImF,OAAO,GAAG9F,CAAC,CAACK,IAAF,CAAOyF,OAArB;AAEA,QAAI9B,UAAU,GAAG,CACftC,iBAAiB,CAACuC,WAAlB,CAA8BjE,CAAC,CAACK,IAAF,CAAO2D,UAArC,KAAoD,IADrC,EAEfE,MAFe,CAERC,OAFQ,CAAjB;AAIA,QAAIoC,CAAC,GAAG,MAAM9F,MAAM,CAAC+F,SAAP,CAAiB;AAC7BnG,MAAAA,IAAI,EAAE;AAAEyF,QAAAA,OAAO,EAAEpE,iBAAiB,CAACuC,WAAlB,CAA8B6B,OAA9B;AAAX,OADuB;AAE7BM,MAAAA,KAAK,EAAEnG,GAFsB;AAG7BoD,MAAAA,KAAK,EAAEA,KAHsB;AAI7BW,MAAAA;AAJ6B,KAAjB,CAAd;AAMA,QAAI,EAAE,QAAQuC,CAAV,CAAJ,EAAkB,MAAM,IAAIzF,KAAJ,CAAUE,IAAI,CAACC,SAAL,CAAesF,CAAC,CAACxF,GAAjB,CAAV,CAAN;AAClBrB,IAAAA,QAAQ,CAACD,SAAS,CAACH,EAAD,CAAV,CAAR;AACD,GA9BD;AAAA,CADK;;;;AAiCA,MAAMmH,YAAY,GACvB;AAAA,MAAC;AAAEnH,IAAAA,EAAF;AAAMoH,IAAAA;AAAN,GAAD;AAAA,SACA,OAAOhH,QAAP,EAAiBC,QAAjB,KAA8B;AAC5B,QAAIK,CAAC,GAAGL,QAAQ,EAAhB;;AAEA,QAAIC,QAAQ,GAAGC,cAAeC,MAAf,CAAsBC,WAAtB,EAAf;;AAEA,QAAIE,GAAG,GAAG,0BAAcX,EAAd,CAAV;AACA,QAAI;AAAEa,MAAAA;AAAF,QAAW,0BAAcF,GAAd,CAAf;AACA,QAAIG,QAAQ,GAAG,kCAAkBJ,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWC,KAA7B,EAAoCJ,IAApC,EAA0CK,MAA1C,EAAf;AAEA,QAAIC,MAAM,GAAG,sBAAYL,QAAZ,EAAsB;AACjCM,MAAAA,YAAY,EAAEb,cAAec,eAAf;AADmB,KAAtB,CAAb;AAIA,QAAImF,OAAO,GAAG9F,CAAC,CAACK,IAAF,CAAOyF,OAArB;AAEA,QAAI9B,UAAU,GAAG,CACftC,iBAAiB,CAACuC,WAAlB,CAA8BjE,CAAC,CAACK,IAAF,CAAO2D,UAArC,KAAoD,IADrC,EAEfE,MAFe,CAERC,OAFQ,CAAjB;AAIA,QAAIoC,CAAC,GAAG,MAAM9F,MAAM,CAACgC,QAAP,CAAgB;AAC5BkE,MAAAA,IAAI,EAAE;AAAEb,QAAAA,OAAO,EAAEpE,iBAAiB,CAACuC,WAAlB,CAA8B6B,OAA9B;AAAX,OADsB;AAE5Bc,MAAAA,EAAE,EAAE;AAAEd,QAAAA,OAAO,EAAEpE,iBAAiB,CAACuC,WAAlB,CAA8ByC,SAA9B;AAAX,OAFwB;AAG5BN,MAAAA,KAAK,EAAEnG,GAHqB;AAI5BqD,MAAAA,MAAM,EAAE,CAJoB;AAK5BuD,MAAAA,IAAI,EAAE,EALsB;AAM5B7C,MAAAA;AAN4B,KAAhB,CAAd;AASA,QAAI,CAACuC,CAAC,CAAClF,EAAP,EAAW,MAAM,IAAIP,KAAJ,CAAUE,IAAI,CAACC,SAAL,CAAesF,CAAC,CAACxF,GAAjB,CAAV,CAAN;AACX,QAAI;AAAE+F,MAAAA;AAAF,QAAoBP,CAAC,CAAClF,EAA1B;AAEA3B,IAAAA,QAAQ,CAACD,SAAS,CAACH,EAAD,CAAV,CAAR;AAEA,WAAOiH,CAAP;AACD,GAnCD;AAAA,CADK;;;;AAsCA,MAAMQ,QAAQ,GACnB;AAAA,MAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD;AAAA,SACA,OAAOvH,QAAP,EAAiBC,QAAjB,KAA8B;AAC5B,QAAIK,CAAC,GAAGL,QAAQ,EAAhB;;AAEA,QAAIC,QAAQ,GAAGC,cAAeC,MAAf,CAAsBC,WAAtB,EAAf;;AAEA,QAAI;AAAEI,MAAAA;AAAF,QAAW,0BAAc,0BAAc6G,OAAd,CAAd,CAAf;AACA,QAAI5G,QAAQ,GAAG,kCAAkBJ,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWC,KAA7B,EAAoCJ,IAApC,EAA0CK,MAA1C,EAAf;AAEA,QAAIC,MAAM,GAAG,sBAAYL,QAAZ,EAAsB;AACjCM,MAAAA,YAAY,EAAEb,cAAec,eAAf;AADmB,KAAtB,CAAb;AAIA,QAAImF,OAAO,GAAG9F,CAAC,CAACK,IAAF,CAAOyF,OAArB;AACA,QAAI9B,UAAU,GAAG,CACftC,iBAAiB,CAACuC,WAAlB,CAA8BjE,CAAC,CAACK,IAAF,CAAO2D,UAArC,KAAoD,IADrC,EAEfE,MAFe,CAERC,OAFQ,CAAjB;AAIA,QAAIoC,CAAC,GAAG,MAAM9F,MAAM,CAACyG,IAAP,CAAY;AACxB7G,MAAAA,IAAI,EAAE;AAAEyF,QAAAA,OAAO,EAAEpE,iBAAiB,CAACuC,WAAlB,CAA8B6B,OAA9B;AAAX,OADkB;AAExB9B,MAAAA,UAFwB;AAGxBkD,MAAAA,IAAI,EAAE,0BAAcF,OAAd,CAHkB;AAIxBG,MAAAA,MAAM,EAAE,0BAAcF,SAAd,CAJgB;AAKxBJ,MAAAA,IAAI,EAAE;AALkB,KAAZ,CAAd;AAOA,QAAI,CAACN,CAAC,CAAClF,EAAP,EAAW,MAAMkF,CAAC,CAACxF,GAAR;AACXrB,IAAAA,QAAQ,CAACD,SAAS,CAACuH,OAAD,CAAV,CAAR;AACAtH,IAAAA,QAAQ,CAACD,SAAS,CAACwH,SAAD,CAAV,CAAR;AACA,WAAOV,CAAC,CAAClF,EAAT;AACD,GA7BD;AAAA,CADK;;;;AAgCA,MAAM+F,YAAY,GACvB;AAAA,MAAC;AAAEJ,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD;AAAA,SACA,OAAOvH,QAAP,EAAiBC,QAAjB,KAA8B;AAC5B,QAAIK,CAAC,GAAGL,QAAQ,EAAhB;;AAEA,QAAIC,QAAQ,GAAGC,cAAeC,MAAf,CAAsBC,WAAtB,EAAf;;AAEA,QAAI;AAAEI,MAAAA;AAAF,QAAW,0BAAc,0BAAc8G,SAAd,CAAd,CAAf;AACA,QAAI7G,QAAQ,GAAG,kCAAkBJ,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWC,KAA7B,EAAoCJ,IAApC,EAA0CK,MAA1C,EAAf;AAEA,QAAIC,MAAM,GAAG,sBAAYL,QAAZ,EAAsB;AACjCM,MAAAA,YAAY,EAAEb,cAAec,eAAf;AADmB,KAAtB,CAAb;AAIA,QAAImF,OAAO,GAAG9F,CAAC,CAACK,IAAF,CAAOyF,OAArB;AACA,QAAI9B,UAAU,GAAG,CACftC,iBAAiB,CAACuC,WAAlB,CAA8BjE,CAAC,CAACK,IAAF,CAAO2D,UAArC,KAAoD,IADrC,EAEfE,MAFe,CAERC,OAFQ,CAAjB;AAIA,QAAIoC,CAAC,GAAG,MAAM9F,MAAM,CAAC4G,QAAP,CAAgB;AAC5BhH,MAAAA,IAAI,EAAE;AAAEyF,QAAAA,OAAO,EAAEpE,iBAAiB,CAACuC,WAAlB,CAA8B6B,OAA9B;AAAX,OADsB;AAE5B9B,MAAAA,UAF4B;AAG5BkD,MAAAA,IAAI,EAAE,0BAAcF,OAAd,CAHsB;AAI5BG,MAAAA,MAAM,EAAE,0BAAcF,SAAd,CAJoB;AAK5BJ,MAAAA,IAAI,EAAE;AALsB,KAAhB,CAAd;AAOA,QAAI,CAACN,CAAC,CAAClF,EAAP,EAAW,MAAMkF,CAAC,CAACxF,GAAR;AACXrB,IAAAA,QAAQ,CAACD,SAAS,CAACuH,OAAD,CAAV,CAAR;AACAtH,IAAAA,QAAQ,CAACD,SAAS,CAACwH,SAAD,CAAV,CAAR;AACA,WAAOV,CAAC,CAAClF,EAAT;AACD,GA7BD;AAAA,CADK;;;;AAgCA,MAAMiG,YAAY,GACvB;AAAA,MAAC;AAAEhI,IAAAA,EAAF;AAAMgE,IAAAA;AAAN,GAAD;AAAA,SACA,OAAO5D,QAAP,EAAiBC,QAAjB,KAA8B;AAC5B,QAAIK,CAAC,GAAGL,QAAQ,EAAhB;;AAEA,QAAIC,QAAQ,GAAGC,cAAeC,MAAf,CAAsBC,WAAtB,EAAf;;AAEA,QAAIE,GAAG,GAAG,0BAAcX,EAAd,CAAV;AACA,QAAI;AAAEa,MAAAA;AAAF,QAAW,0BAAcF,GAAd,CAAf,CAN4B,CAO5B;;AACA,QAAI6F,OAAO,GAAG9F,CAAC,CAACK,IAAF,CAAOyF,OAArB,CAR4B,CAU5B;;AACA,QAAI/C,GAAG,GAAG,sBACR,kCACE/C,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWC,KADb,EAEEmB,iBAAiB,CAACuE,UAAlB,CAA6BH,OAA7B,EAAsC9F,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWyC,GAAjD,CAFF,CADQ,EAKR;AACErC,MAAAA,YAAY,EAAEb,cAAec,eAAf;AADhB,KALQ,CAAV;AAUA,QAAIqD,UAAU,GAAG,CACftC,iBAAiB,CAACuC,WAAlB,CAA8BjE,CAAC,CAACK,IAAF,CAAO2D,UAArC,KAAoD,IADrC,EAEfE,MAFe,CAERC,OAFQ,CAAjB;AAIA,QAAIoC,CAAJ;;AACA,QAAI;AACF,UAAIA,CAAC,GAAG,MAAMxD,GAAG,CAACuE,YAAJ,CAAiBnH,IAAjB,EAAuB;AACnCE,QAAAA,IAAI,EAAE;AAAEyF,UAAAA,OAAO,EAAEpE,iBAAiB,CAACuC,WAAlB,CAA8B6B,OAA9B;AAAX,SAD6B;AAEnCM,QAAAA,KAAK,EAAEnG,GAF4B;AAGnC+D,QAAAA,UAHmC;AAInCV,QAAAA;AAJmC,OAAvB,CAAd;AAOA,UAAI,EAAE,QAAQiD,CAAV,CAAJ,EAAkB,MAAMA,CAAC,CAACxF,GAAR;AAElB,UAAI;AAAE+F,QAAAA;AAAF,UAAoB;AAAEA,QAAAA,aAAa,EAAE;AAAjB,OAAxB,CAVE,CAU4C;;AAE9CpH,MAAAA,QAAQ,CAAC,kCAAD,CAAR;AACAA,MAAAA,QAAQ,CAACD,SAAS,CAACH,EAAD,CAAV,CAAR;AACA,aAAOiH,CAAC,CAAClF,EAAT;AACD,KAfD,CAeE,OAAOkG,CAAP,EAAU;AACVxB,MAAAA,OAAO,CAACyB,KAAR,CAAc,gBAAd,EAAgCD,CAAhC;AACD;AACF,GA7CD;AAAA,CADK;;;;AAgDA,MAAME,QAAQ,GACnB;AAAA,MAAC;AAAEnI,IAAAA;AAAF,GAAD;AAAA,SACA,OAAOI,QAAP,EAAiBC,QAAjB,KAA8B;AAC5B,QAAIK,CAAC,GAAGL,QAAQ,EAAhB;;AAEA,QAAIC,QAAQ,GAAGC,cAAeC,MAAf,CAAsBC,WAAtB,EAAf;;AAEA,QAAIE,GAAG,GAAG,0BAAcX,EAAd,CAAV;AACA,QAAI;AAAEa,MAAAA;AAAF,QAAW,0BAAcF,GAAd,CAAf;AACA,QAAIG,QAAQ,GAAG,kCAAkBJ,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWC,KAA7B,EAAoCJ,IAApC,EAA0CK,MAA1C,EAAf;AAEA,QAAIC,MAAM,GAAG,sBAAYL,QAAZ,EAAsB;AACjCM,MAAAA,YAAY,EAAEb,cAAec,eAAf;AADmB,KAAtB,CAAb;AAIA,QAAImF,OAAO,GAAG9F,CAAC,CAACK,IAAF,CAAOyF,OAArB;AACA,QAAI9B,UAAU,GAAG,CACftC,iBAAiB,CAACuC,WAAlB,CAA8BjE,CAAC,CAACK,IAAF,CAAO2D,UAArC,KAAoD,IADrC,EAEfE,MAFe,CAERC,OAFQ,CAAjB;AAIA,QAAIuD,GAAG,GAAG,MAAMjH,MAAM,CAACkH,IAAP,CAAY;AAC1BtH,MAAAA,IAAI,EAAE;AAAEyF,QAAAA,OAAO,EAAEpE,iBAAiB,CAACuC,WAAlB,CAA8B6B,OAA9B;AAAX,OADoB;AAE1BM,MAAAA,KAAK,EAAEnG,GAFmB;AAG1BqD,MAAAA,MAAM,EAAE,CAHkB;AAI1BuD,MAAAA,IAAI,EAAE,EAJoB;AAK1B7C,MAAAA;AAL0B,KAAZ,CAAhB;AAQA,QAAI0D,GAAG,CAAC3G,GAAR,EAAa,MAAM2G,GAAG,CAAC3G,GAAV;AAEbrB,IAAAA,QAAQ,CAAC,kCAAD,CAAR;AACA,QAAI;AAAEoH,MAAAA;AAAF,QAAoBY,GAAG,CAACrG,EAA5B;AACA,WAAOqG,GAAG,CAACrG,EAAX;AACD,GAhCD;AAAA,CADK;;;;AAmCA,MAAMuG,WAAW,GACtB;AAAA,MAAC;AAAEtI,IAAAA,EAAF;AAAMuI,IAAAA;AAAN,GAAD;AAAA,SACA,OAAOnI,QAAP,EAAiBC,QAAjB,KAA8B;AAC5B,QAAIK,CAAC,GAAGL,QAAQ,EAAhB;;AAEA,QAAIC,QAAQ,GAAGC,cAAeC,MAAf,CAAsBC,WAAtB,EAAf;;AACA,QAAIE,GAAG,GAAG,0BAAcX,EAAd,CAAV;AACA,QAAI;AAAEa,MAAAA;AAAF,QAAW,0BAAcF,GAAd,CAAf;AACA,QAAIG,QAAQ,GAAG,kCAAkBJ,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWC,KAA7B,EAAoCJ,IAApC,EAA0CK,MAA1C,EAAf;AAEA,QAAIC,MAAM,GAAG,sBAAYL,QAAZ,EAAsB;AACjCM,MAAAA,YAAY,EAAEb,cAAec,eAAf;AADmB,KAAtB,CAAb;AAIA,QAAImF,OAAO,GAAG9F,CAAC,CAACK,IAAF,CAAOyF,OAArB;AACA,QAAI9B,UAAU,GAAG,CACftC,iBAAiB,CAACuC,WAAlB,CAA8BjE,CAAC,CAACK,IAAF,CAAO2D,UAArC,KAAoD,IADrC,EAEfE,MAFe,CAERC,OAFQ,CAAjB;AAIA,QAAIuD,GAAG,GAAG,MAAMjH,MAAM,CAACqH,OAAP,CAAe;AAC7B1B,MAAAA,KAAK,EAAEnG,GADsB;AAE7B8H,MAAAA,SAAS,EAAE,CAFkB;AAG7B/D,MAAAA,UAH6B;AAI7B6D,MAAAA;AAJ6B,KAAf,CAAhB;AAMA,QAAIH,GAAG,CAAC3G,GAAR,EAAa,MAAM2G,GAAG,CAAC3G,GAAV;AACbrB,IAAAA,QAAQ,CAACD,SAAS,CAACH,EAAD,CAAV,CAAR;AAEA,WAAOoI,GAAG,CAACrG,EAAX;AACD,GA5BD;AAAA,CADK;;;;AA+BA,MAAM2G,OAAO,GAClB;AAAA,MAAC;AAAE1I,IAAAA,EAAF;AAAM2I,IAAAA,GAAN;AAAWpB,IAAAA;AAAX,GAAD;AAAA,SACA,OAAOnH,QAAP,EAAiBC,QAAjB,KAA8B;AAC5B,QAAIK,CAAC,GAAGL,QAAQ,EAAhB;;AAEA,QAAIC,QAAQ,GAAGC,cAAeC,MAAf,CAAsBC,WAAtB,EAAf;;AAEA,QAAIE,GAAG,GAAG,0BAAcX,EAAd,CAAV;AACA,QAAI;AAAEa,MAAAA;AAAF,QAAW,0BAAcF,GAAd,CAAf;AACA,QAAIG,QAAQ,GAAG,kCAAkBJ,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWC,KAA7B,EAAoCJ,IAApC,EAA0CK,MAA1C,EAAf;AAEA,QAAIC,MAAM,GAAG,sBAAYL,QAAZ,EAAsB;AACjCM,MAAAA,YAAY,EAAEb,cAAec,eAAf;AADmB,KAAtB,CAAb;AAIA,QAAImF,OAAO,GAAG9F,CAAC,CAACK,IAAF,CAAOyF,OAArB;AACA,QAAI9B,UAAU,GAAG,CACftC,iBAAiB,CAACuC,WAAlB,CAA8BjE,CAAC,CAACK,IAAF,CAAO2D,UAArC,KAAoD,IADrC,EAEfE,MAFe,CAERC,OAFQ,CAAjB;AAIA,QAAI+D,CAAC,GAAG,MAAMzH,MAAM,CAACwH,GAAP,CAAW;AACvB5H,MAAAA,IAAI,EAAE;AAAEyF,QAAAA,OAAO,EAAEpE,iBAAiB,CAACuC,WAAlB,CAA8B6B,OAA9B;AAAX,OADiB;AAEvBM,MAAAA,KAAK,EAAEnG,GAFgB;AAGvB4G,MAAAA,IAHuB;AAIvBoB,MAAAA,GAJuB;AAKvBjE,MAAAA,UALuB;AAMvBmE,MAAAA,SAAS,EAAE;AANY,KAAX,CAAd;AASA,QAAI,CAACD,CAAC,CAAC7G,EAAP,EAAW,MAAM6G,CAAC,CAACnH,GAAR;AACXrB,IAAAA,QAAQ,CAAC,kCAAD,CAAR;AACAA,IAAAA,QAAQ,CAACD,SAAS,CAACH,EAAD,CAAV,CAAR;AACA,WAAO4I,CAAC,CAAC7G,EAAT;AACD,GAhCD;AAAA,CADK;;;;AAmCA,MAAM+G,iBAAiB,GAC5B;AAAA,MAAC;AAAE9I,IAAAA;AAAF,GAAD;AAAA,SACA,OAAOI,QAAP,EAAiBC,QAAjB,KAA8B;AAC5B,QAAIK,CAAC,GAAGL,QAAQ,EAAhB;;AAEA,QAAIC,QAAQ,GAAGC,cAAeC,MAAf,CAAsBC,WAAtB,EAAf;;AAEA,QAAIE,GAAG,GAAG,0BAAcX,EAAd,CAAV;AACA,QAAI;AAAEY,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkB,0BAAcF,GAAd,CAAtB;AACA,QAAIG,QAAQ,GAAG,kCAAkBJ,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWC,KAA7B,EAAoCJ,IAApC,EAA0CK,MAA1C,EAAf;AAEA,QAAIC,MAAM,GAAG,sBAAYL,QAAZ,EAAsB;AACjCM,MAAAA,YAAY,EAAEb,cAAec,eAAf;AADmB,KAAtB,CAAb;AAIA,QAAImF,OAAO,GAAG9F,CAAC,CAACK,IAAF,CAAOyF,OAArB;AACA,QAAI9B,UAAU,GAAG,CACftC,iBAAiB,CAACuC,WAAlB,CAA8BjE,CAAC,CAACK,IAAF,CAAO2D,UAArC,KAAoD,IADrC,EAEfE,MAFe,CAERC,OAFQ,CAAjB;AAIA,QAAI;AAAEkE,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAgB,gCAApB;AAEA,QAAIZ,GAAG,GAAG,MAAMjH,MAAM,CAAC8H,aAAP,CAAqB;AACnC5B,MAAAA,IAAI,EAAE;AAAEb,QAAAA,OAAO,EAAEpE,iBAAiB,CAACuC,WAAlB,CAA8B6B,OAA9B;AAAX,OAD6B;AAEnCwC,MAAAA,IAAI,EAAEvD,KAAK,CAAC4B,IAAN,CAAW2B,IAAX,CAF6B;AAGnClC,MAAAA,KAAK,EAAEnG,GAH4B;AAInC+D,MAAAA;AAJmC,KAArB,CAAhB;AAMA,QAAI0D,GAAG,CAAC3G,GAAR,EAAa,MAAM2G,GAAG,CAAC3G,GAAV;AAEb,QAAIyH,IAAI,GAAG,sBAAWrI,IAAX,EAAiBD,KAAjB,EAAwBmI,GAAxB,CAAX;AAEA,WAAOG,IAAP;AACD,GAhCD;AAAA,CADK;;;;AAmCA,MAAMC,cAAc,GACzB;AAAA,MAAC;AAAED,IAAAA;AAAF,GAAD;AAAA,SACA,OAAO9I,QAAP,EAAiBC,QAAjB,KAA8B;AAC5B,QAAIK,CAAC,GAAGL,QAAQ,EAAhB;AACA,QAAI;AAAEQ,MAAAA,IAAF;AAAQyB,MAAAA,UAAR;AAAoByG,MAAAA;AAApB,QAA4B,sBAAWG,IAAX,CAAhC;AAEA,QAAIpI,QAAQ,GAAG,kCAAkBJ,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWC,KAA7B,EAAoCJ,IAApC,CAAf;;AAEA,QAAIP,QAAQ,GAAGC,cAAeC,MAAf,CAAsBC,WAAtB,EAAf;;AAEA,QAAIU,MAAM,GAAG,sBAAYL,QAAZ,EAAsB;AACjCM,MAAAA,YAAY,EAAEb,cAAec,eAAf;AADmB,KAAtB,CAAb;AAIA,QAAImF,OAAO,GAAG9F,CAAC,CAACK,IAAF,CAAOyF,OAArB;AAEA,QAAI7F,GAAG,GAAG,0BAAcE,IAAd,EAAoByB,UAApB,CAAV;AAEA,QAAIhB,IAAI,GAAG,MAAMH,MAAM,CAACiI,UAAP,CAAkB;AACjC9B,MAAAA,EAAE,EAAE;AAAEd,QAAAA,OAAO,EAAEpE,iBAAiB,CAACuC,WAAlB,CAA8B6B,OAA9B;AAAX,OAD6B;AAEjCuC,MAAAA,GAAG,EAAEtD,KAAK,CAAC4B,IAAN,CAAW0B,GAAX,CAF4B;AAGjCjC,MAAAA,KAAK,EAAEnG;AAH0B,KAAlB,CAAjB;AAMAP,IAAAA,QAAQ,CAACD,SAAS,CAAC,wBAAYQ,GAAZ,CAAD,CAAV,CAAR;AAEA,WAAOW,IAAP;AACD,GA1BD;AAAA,CADK;;;;AA6BA,MAAM+H,cAAc,GAAIH,IAAD,IAAU,OAAO9I,QAAP,EAAiBC,QAAjB,KAA8B;AACpE,MAAIK,CAAC,GAAGL,QAAQ,EAAhB;AAEA,MAAI;AAAEQ,IAAAA,IAAF;AAAQyB,IAAAA;AAAR,MAAuB,sBAAW4G,IAAX,CAA3B;AAEA,MAAI,CAACxI,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWC,KAAhB,EAAuB,MAAMO,KAAK,CAAC,gBAAD,CAAX;AAEvB,MAAIV,QAAQ,GAAG,kCAAkBJ,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWC,KAA7B,EAAoCJ,IAApC,CAAf;AAEA,MAAIb,EAAE,GAAG,0BAAca,IAAd,EAAoByB,UAApB,CAAT;AACA,SAAO,MAAM,wBAAYtC,EAAZ,CAAN,GAAwB,GAAxB,GAA8BkJ,IAArC;AACD,CAXM;;;;AAaA,MAAMI,kBAAkB,GAC7B;AAAA,MAAC;AAAEtJ,IAAAA;AAAF,GAAD;AAAA,SACA,OAAOI,QAAP,EAAiBC,QAAjB,KAA8B;AAC5B,QAAIK,CAAC,GAAGL,QAAQ,EAAhB;AACA,UAAMkJ,SAAS,GAAG1C,MAAM,CAACnG,CAAC,CAACK,IAAF,CAAOyI,MAAP,CAAcD,SAAf,CAAxB;AAEA,QAAInE,GAAG,GAAG1E,CAAC,CAAC0E,GAAF,CAAMpF,EAAN,CAAV;AAEA,UAAMyJ,GAAG,GAAG,uBAAS;AAAEnG,MAAAA,GAAG,EAAE;AAAP,KAAT,IAA0BiG,SAAtC;AAEA,UAAMpG,QAAQ,GAAG0D,MAAM,CAACnG,CAAC,CAACK,IAAF,CAAOyI,MAAP,CAAcE,MAAf,CAAvB;AAEA,UAAMC,OAAO,GACX,2BAAa;AACX9G,MAAAA,MAAM,EAAEuC,GAAG,CAACvC,MAAJ,IAAc,CADX;AAEXJ,MAAAA,OAAO,EAAE2C,GAAG,CAAC3C,OAFF;AAGXD,MAAAA,KAAK,EAAE4C,GAAG,CAAC5C,KAHA;AAIXG,MAAAA,OAAO,EAAEyC,GAAG,CAACzC,OAJF;AAKXW,MAAAA,GAAG,EAAE;AALM,KAAb,IAMKiG,SAPP;AASA,QAAIK,IAAI,GAAGH,GAAG,GAAGtG,QAAN,GAAiBwG,OAA5B;AAEA,QAAIE,OAAO,GAAGhD,MAAM,CAACzB,GAAG,CAAC3B,GAAJ,CAAQ,CAAR,CAAD,CAAN,GAAqBoD,MAAM,CAACzB,GAAG,CAAC3B,GAAJ,CAAQ,CAAR,CAAD,CAAzC;AACA,QAAIqG,IAAI,GAAGF,IAAI,GAAGC,OAAP,GAAiBhD,MAAM,CAACnG,CAAC,CAACK,IAAF,CAAOyI,MAAP,CAAcE,MAAf,CAAlC;AACA,QAAII,IAAI,GAAG,MAAX,EAAmBA,IAAI,GAAG,EAAP,CAvBS,CAyB5B;;AAEA,WAAOA,IAAP;AACD,GA7BD;AAAA,CADK;;;;AAgCA,MAAMC,cAAc,GAAIC,IAAD,IAAU,OAAO5J,QAAP,EAAiBC,QAAjB,KAA8B;AACpE,MAAIK,CAAC,GAAGL,QAAQ,EAAhB;AAEA,QAAMkJ,SAAS,GAAG1C,MAAM,CAACnG,CAAC,CAACK,IAAF,CAAOyI,MAAP,CAAcD,SAAf,CAAxB;AACA,QAAMpG,QAAQ,GAAG0D,MAAM,CAACnG,CAAC,CAACK,IAAF,CAAOyI,MAAP,CAAcE,MAAf,CAAvB;AACA,QAAMD,GAAG,GAAG,uBAAS;AAAEnG,IAAAA,GAAG,EAAE0G,IAAI,CAAC1G;AAAZ,GAAT,IAA8BiG,SAA1C;AAEA,QAAMI,OAAO,GACX,2BAAa;AACX9G,IAAAA,MAAM,EAAE,CADG;AACA;AACXJ,IAAAA,OAAO,EAAEuH,IAAI,CAACvH,OAFH;AAGXD,IAAAA,KAAK,EAAEwH,IAAI,CAACxH,KAHD;AAIXG,IAAAA,OAAO,EAAEqH,IAAI,CAACrH,OAJH;AAKXW,IAAAA,GAAG,EAAE0G,IAAI,CAAC1G;AALC,GAAb,IAMKiG,SAPP;AASA,SAAO;AAAEpG,IAAAA,QAAF;AAAYsG,IAAAA,GAAZ;AAAiBE,IAAAA;AAAjB,GAAP;AACD,CAjBM;;;;AAmBA,MAAMM,QAAQ,GAAID,IAAD,IAAU,OAAO5J,QAAP,EAAiBC,QAAjB,KAA8B;AAC9D,MAAIK,CAAC,GAAGL,QAAQ,EAAhB;AACA,QAAM6J,cAAc,GAAGxJ,CAAC,CAACK,IAAF,CAAOmJ,cAA9B;AAEA,MAAIC,SAAS,GAAGzJ,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWoJ,SAA3B;AACA,MAAIvJ,IAAI,GAAGsJ,SAAS,CAAClI,IAAI,CAACoI,KAAL,CAAWpI,IAAI,CAACqI,MAAL,KAAgBH,SAAS,CAACrH,MAArC,CAAD,CAApB;AAEA,MAAIyH,UAAU,GAAG,kCAAkB7J,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWC,KAA7B,EAAoCJ,IAApC,CAAjB;;AAEA,MAAIP,QAAQ,GAAGC,cAAeC,MAAf,CAAsBC,WAAtB,EAAf;;AACA,MAAI+F,OAAO,GAAG9F,CAAC,CAACK,IAAF,CAAOyF,OAArB;AAEA,MAAIpB,GAAG,GAAG,sBAAYmF,UAAZ,EAAwB;AAChCnJ,IAAAA,YAAY,EAAEb,cAAec,eAAf;AADkB,GAAxB,CAAV;AAIA,MAAIoC,GAAG,GAAG,sBACR,kCACE/C,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWC,KADb,EAEEmB,iBAAiB,CAACuE,UAAlB,CAA6BH,OAA7B,EAAsC9F,CAAC,CAACK,IAAF,CAAOC,GAAP,CAAWyC,GAAjD,CAFF,CADQ,EAKR;AACErC,IAAAA,YAAY,EAAEb,cAAec,eAAf;AADhB,GALQ,CAAV,CAhB8D,CA0B9D;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,MAAIqD,UAAU,GAAG,CACftC,iBAAiB,CAACuC,WAAlB,CAA8BjE,CAAC,CAACK,IAAF,CAAO2D,UAArC,KAAoD,IADrC,EAEfE,MAFe,CAERC,OAFQ,CAAjB;AAIA,MAAI,CAAC2B,OAAL,EAAc,MAAMhF,KAAK,CAAC,sBAAD,CAAX,CA3CgD,CA2CX;;AAEnD,MAAI;AAAA;;AACF;AACA,QAAIgJ,IAAI,GAAG,MAAM/G,GAAG,CAACwG,QAAJ,CAAapD,MAAM,CAAChG,IAAD,CAAnB,EAA2B;AAC1CE,MAAAA,IAAI,EAAE;AAAEyF,QAAAA,OAAO,EAAEpE,iBAAiB,CAACuC,WAAlB,CAA8B6B,OAA9B;AAAX,OADoC;AAE1C9B,MAAAA,UAF0C;AAG1CnD,MAAAA,QAAQ,EAAEyI;AAHgC,KAA3B,CAAjB;;AAMA,QAAI,CAAAQ,IAAI,SAAJ,IAAAA,IAAI,WAAJ,yBAAAA,IAAI,CAAE/I,GAAN,wDAAWgJ,WAAX,MAA2B,IAA/B,EAAqC;AACnC,YAAMrK,QAAQ,CAAC,gCAAD,CAAd;AACA,YAAMA,QAAQ,CAAC6J,QAAQ,CAACD,IAAD,CAAT,CAAd;AACA;AACD;;AAED,QAAI,CAAAQ,IAAI,SAAJ,IAAAA,IAAI,WAAJ,0BAAAA,IAAI,CAAE/I,GAAN,0DAAWiJ,mBAAX,MAAmC,IAAvC,EAA6C;AAC3C,YAAMlJ,KAAK,CAAC,sBAAD,CAAX;AACD,KAhBC,CAiBF;;;AACA,QAAI,EAAE,QAAQgJ,IAAV,CAAJ,EAAqB,MAAMhJ,KAAK,CAACE,IAAI,CAACC,SAAL,CAAe6I,IAAI,CAAC/I,GAApB,CAAD,CAAX;AAErB,QAAI;AAAEa,MAAAA,UAAF;AAAckF,MAAAA;AAAd,QAAgCgD,IAAI,CAACzI,EAAzC;AACA,QAAI/B,EAAE,GAAG,wBAAY,0BAAca,IAAd,EAAoByB,UAApB,CAAZ,CAAT;;AAEA,QAAI0H,IAAJ,aAAIA,IAAJ,iCAAIA,IAAI,CAAEvH,OAAN,CAAc,CAAd,CAAJ,oEAAI,eAAkB6B,QAAtB,kDAAI,sBAA4BC,GAAhC,EAAqC;AACnC,YAAM,sBACJa,GADI,EAEJ9C,UAFI,EAGJ,SAHI,EAIJ,MAAM,qBAAU0H,IAAI,CAACvH,OAAL,CAAa,CAAb,EAAgB6B,QAAhB,CAAyBC,GAAnC,CAJF,EAKJG,UALI,CAAN;AAOD;;AAED,QAAIsF,IAAJ,aAAIA,IAAJ,8BAAIA,IAAI,CAAExH,KAAV,gEAAI,YAAa8B,QAAjB,iDAAI,qBAAuBC,GAA3B,EAAgC;AAC9B,YAAM,sBACJa,GADI,EAEJ9C,UAFI,EAGJ,OAHI,EAIJ,MAAM,qBAAU0H,IAAI,CAACxH,KAAL,CAAW8B,QAAX,CAAoBC,GAA9B,CAJF,EAKJG,UALI,CAAN;AAOD;AACF,GA1CD,CA0CE,OAAOuD,CAAP,EAAU;AACVxB,IAAAA,OAAO,CAACyB,KAAR,CAAcD,CAAd;AACA,UAAMA,CAAN;AACD;;AAED7H,EAAAA,QAAQ,CAAC,kCAAD,CAAR;AACD,CA7FM;;;eA+FQZ,QAAQ,CAACmL,O","sourcesContent":["/* global BigInt */\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport authentication from \"../auth\";\nimport {\n  encodeTokenId,\n  decodeTokenId,\n  tokenUrl,\n  ipfsTokenUrl,\n  tokenToText,\n  tokenFromText,\n} from \"@vvv-interactive/nftanvil-tools/cjs/token.js\";\nimport { nftCanister } from \"@vvv-interactive/nftanvil-canisters/cjs/nft.js\";\nimport {\n  chunkBlob,\n  encodeLink,\n  decodeLink,\n  generateKeyHashPair,\n  uploadFile,\n} from \"@vvv-interactive/nftanvil-tools/cjs/data.js\";\n\nimport * as AccountIdentifier from \"@vvv-interactive/nftanvil-tools/cjs/accountidentifier.js\";\nimport * as TransactionId from \"@vvv-interactive/nftanvil-tools/cjs/transactionid.js\";\nimport { PrincipalFromSlot } from \"@vvv-interactive/nftanvil-tools/cjs/principal.js\";\nimport {\n  priceStorage,\n  priceOps,\n} from \"@vvv-interactive/nftanvil-tools/cjs/pricing.js\";\n\nimport { pwrCanister } from \"@vvv-interactive/nftanvil-canisters/cjs/pwr.js\";\n\nimport { user_refresh_balances, user_refresh_config } from \"./user\";\n\nexport const nftSlice = createSlice({\n  name: \"nft\",\n  initialState: {},\n  reducers: {\n    nftSet: (state, action) => {\n      return {\n        ...state,\n        [action.payload.id]: action.payload.meta,\n      };\n    },\n  },\n});\n\nexport const { nftSet } = nftSlice.actions;\n\nexport const nft_fetch = (id) => async (dispatch, getState) => {\n  let identity = authentication.client.getIdentity();\n  let s = getState();\n\n  let tid = tokenFromText(id);\n  let { index, slot } = decodeTokenId(tid);\n  let canister = PrincipalFromSlot(s.user.map.space, slot).toText();\n\n  let nftcan = nftCanister(canister, {\n    agentOptions: authentication.getAgentOptions(),\n  });\n\n  let resp = await nftcan.metadata(tid);\n  if (!resp) throw Error(\"Can't fetch NFT meta\");\n  if (resp.err)\n    throw Error(\"Fetching NFT meta error \" + JSON.stringify(resp.err));\n\n  let { bearer, data, vars } = resp.ok;\n  let now = Math.ceil(Date.now() / 1000 / 60);\n\n  let meta = {\n    bearer: AccountIdentifier.ArrayToText(bearer),\n\n    // inherant\n    tokenIndex: index,\n    canister,\n\n    // data\n\n    domain: data.domain[0],\n    // use: data.use[0],\n    // hold: data.hold[0],\n    thumb: data.thumb,\n    content: data.content[0],\n    created: data.created,\n    quality: data.quality,\n    lore: data.lore[0],\n    name: data.name[0],\n    custom: data.custom.length,\n    author: AccountIdentifier.ArrayToText(data.author),\n    secret: data.secret,\n    entropy: data.entropy,\n    attributes: data.attributes,\n    transfer: data.transfer,\n    authorShare: data.authorShare,\n    tags: data.tags,\n    //vars\n    ttl: vars.ttl[0],\n    cooldownUntil: vars.cooldownUntil[0],\n    boundUntil: vars.boundUntil[0],\n    pwr: [vars.pwrOps.toString(), vars.pwrStorage.toString()],\n    sockets: vars.sockets.map((x) => tokenToText(x)), //TokenIdentifier.ArrayToText(x)),\n    price: { ...vars.price, amount: vars.price.amount.toString() },\n    history: vars.history,\n    rechargeable: data.rechargeable,\n  };\n\n  meta.transferable =\n    meta.transfer.unrestricted === null ||\n    (meta.transfer.bindsDuration && meta.boundUntil < now);\n\n  if (meta.thumb.internal)\n    meta.thumb.internal.url = tokenUrl(s.user.map.space, tid, \"thumb\");\n  if (meta.thumb.ipfs) meta.thumb.ipfs.url = ipfsTokenUrl(meta.thumb.ipfs.cid);\n\n  let subaccount = [\n    AccountIdentifier.TextToArray(s.user.subaccount) || null,\n  ].filter(Boolean);\n\n  if (meta.content?.internal) {\n    if (meta.secret)\n      meta.content.internal.url = await nft_media_get(s, {\n        id,\n        contentType: meta.content.internal.contentType,\n        size: meta.content.internal.size,\n        position: \"content\",\n        subaccount,\n      });\n    else meta.content.internal.url = tokenUrl(s.user.map.space, tid, \"content\");\n  }\n  if (meta.content?.ipfs)\n    meta.content.ipfs.url = ipfsTokenUrl(meta.content.ipfs.cid);\n\n  dispatch(nftSet({ id, meta }));\n  return meta;\n};\n\nexport const nft_media_get = async (\n  s,\n  { id, contentType, size, position, subaccount = false }\n) => {\n  let identity = authentication.client.getIdentity();\n\n  let tid = tokenFromText(id);\n  let { index, slot } = decodeTokenId(tid);\n  let canister = PrincipalFromSlot(s.user.map.space, slot).toText();\n\n  let nftcan = nftCanister(canister, {\n    agentOptions: authentication.getAgentOptions(),\n  });\n\n  let src = await nft_fetch_file(\n    nftcan,\n    size,\n    contentType,\n    index,\n    position,\n    subaccount\n  );\n\n  return src;\n};\n\nconst nft_fetch_file = async (\n  nft,\n  size,\n  contentType,\n  tokenIndex,\n  position,\n  subaccount = false\n) => {\n  let chunkSize = 1024 * 512;\n  let chunks = Math.ceil(size / chunkSize);\n\n  return await Promise.all(\n    Array(chunks)\n      .fill(0)\n      .map((_, chunkIdx) => {\n        return nft.fetch_chunk({\n          tokenIndex,\n          chunkIdx,\n          position: { [position]: null },\n          subaccount: subaccount ? subaccount : [],\n        });\n      })\n  ).then((chunks) => {\n    const blob = new Blob(\n      chunks.map((chunk) => {\n        return new Uint8Array(chunk[0]).buffer;\n      }),\n      { type: contentType }\n    );\n\n    return URL.createObjectURL(blob);\n  });\n};\n\nexport const nft_purchase =\n  ({ id, amount }) =>\n  async (dispatch, getState) => {\n    let s = getState();\n\n    let identity = authentication.client.getIdentity();\n\n    let tid = tokenFromText(id);\n    let { slot } = decodeTokenId(tid);\n\n    let address = s.user.address;\n    let subaccount = [\n      AccountIdentifier.TextToArray(s.user.subaccount) || null,\n    ].filter(Boolean);\n\n    console.log(\"BUYING\", id, amount);\n\n    let pwr = pwrCanister(\n      PrincipalFromSlot(\n        s.user.map.space,\n        AccountIdentifier.TextToSlot(address, s.user.map.pwr)\n      ),\n      {\n        agentOptions: authentication.getAgentOptions(),\n      }\n    );\n\n    let prez = await pwr.nft_purchase(BigInt(slot), {\n      token: tokenFromText(id),\n      user: { address: AccountIdentifier.TextToArray(address) },\n      subaccount,\n      affiliate: [],\n      amount,\n    });\n\n    if (prez.err) throw new Error(JSON.stringify(prez.err));\n\n    dispatch(user_refresh_balances());\n    dispatch(nft_fetch(id));\n    console.log(\"purchase result\", prez);\n  };\n\n// export const nft_purchase_intent =\n//   ({ id }) =>\n//   async (dispatch, getState) => {\n//     let s = getState();\n\n//     let identity = authentication.client.getIdentity();\n\n//     let tid = tokenFromText(id);\n//     let { slot } = decodeTokenId(tid);\n//     //console.log(\"t\", id, slot, tokenFromText(id));\n//     let canister = PrincipalFromSlot(s.user.map.space, slot).toText();\n\n//     let nftcan = nftCanister(canister, {\n//       agentOptions: authentication.getAgentOptions(),\n//     });\n\n//     let address = s.user.address;\n//     let subaccount = [\n//       AccountIdentifier.TextToArray(s.user.subaccount) || null,\n//     ].filter(Boolean);\n\n//     let t = await nftcan.purchase_intent({\n//       user: { address: AccountIdentifier.TextToArray(address) },\n//       token: tokenFromText(id),\n//       subaccount,\n//     });\n\n//     if (!(\"ok\" in t)) throw t;\n\n//     return t.ok;\n//   };\n\nexport const nft_set_price =\n  ({ id, price }) =>\n  async (dispatch, getState) => {\n    let s = getState();\n\n    let identity = authentication.client.getIdentity();\n    let tid = tokenFromText(id);\n    let { slot } = decodeTokenId(tid);\n\n    console.log(\"Setting price\", id, { slot });\n\n    let canister = PrincipalFromSlot(s.user.map.space, slot).toText();\n\n    let nftcan = nftCanister(canister, {\n      agentOptions: authentication.getAgentOptions(),\n    });\n\n    let address = s.user.address;\n\n    let subaccount = [\n      AccountIdentifier.TextToArray(s.user.subaccount) || null,\n    ].filter(Boolean);\n\n    let t = await nftcan.set_price({\n      user: { address: AccountIdentifier.TextToArray(address) },\n      token: tid,\n      price: price,\n      subaccount,\n    });\n    if (!(\"ok\" in t)) throw new Error(JSON.stringify(t.err));\n    dispatch(nft_fetch(id));\n  };\n\nexport const nft_transfer =\n  ({ id, toAddress }) =>\n  async (dispatch, getState) => {\n    let s = getState();\n\n    let identity = authentication.client.getIdentity();\n\n    let tid = tokenFromText(id);\n    let { slot } = decodeTokenId(tid);\n    let canister = PrincipalFromSlot(s.user.map.space, slot).toText();\n\n    let nftcan = nftCanister(canister, {\n      agentOptions: authentication.getAgentOptions(),\n    });\n\n    let address = s.user.address;\n\n    let subaccount = [\n      AccountIdentifier.TextToArray(s.user.subaccount) || null,\n    ].filter(Boolean);\n\n    let t = await nftcan.transfer({\n      from: { address: AccountIdentifier.TextToArray(address) },\n      to: { address: AccountIdentifier.TextToArray(toAddress) },\n      token: tid,\n      amount: 1,\n      memo: [],\n      subaccount,\n    });\n\n    if (!t.ok) throw new Error(JSON.stringify(t.err));\n    let { transactionId } = t.ok;\n\n    dispatch(nft_fetch(id));\n\n    return t;\n  };\n\nexport const nft_plug =\n  ({ plug_id, socket_id }) =>\n  async (dispatch, getState) => {\n    let s = getState();\n\n    let identity = authentication.client.getIdentity();\n\n    let { slot } = decodeTokenId(tokenFromText(plug_id));\n    let canister = PrincipalFromSlot(s.user.map.space, slot).toText();\n\n    let nftcan = nftCanister(canister, {\n      agentOptions: authentication.getAgentOptions(),\n    });\n\n    let address = s.user.address;\n    let subaccount = [\n      AccountIdentifier.TextToArray(s.user.subaccount) || null,\n    ].filter(Boolean);\n\n    let t = await nftcan.plug({\n      user: { address: AccountIdentifier.TextToArray(address) },\n      subaccount,\n      plug: tokenFromText(plug_id),\n      socket: tokenFromText(socket_id),\n      memo: [],\n    });\n    if (!t.ok) throw t.err;\n    dispatch(nft_fetch(plug_id));\n    dispatch(nft_fetch(socket_id));\n    return t.ok;\n  };\n\nexport const nft_unsocket =\n  ({ plug_id, socket_id }) =>\n  async (dispatch, getState) => {\n    let s = getState();\n\n    let identity = authentication.client.getIdentity();\n\n    let { slot } = decodeTokenId(tokenFromText(socket_id));\n    let canister = PrincipalFromSlot(s.user.map.space, slot).toText();\n\n    let nftcan = nftCanister(canister, {\n      agentOptions: authentication.getAgentOptions(),\n    });\n\n    let address = s.user.address;\n    let subaccount = [\n      AccountIdentifier.TextToArray(s.user.subaccount) || null,\n    ].filter(Boolean);\n\n    let t = await nftcan.unsocket({\n      user: { address: AccountIdentifier.TextToArray(address) },\n      subaccount,\n      plug: tokenFromText(plug_id),\n      socket: tokenFromText(socket_id),\n      memo: [],\n    });\n    if (!t.ok) throw t.err;\n    dispatch(nft_fetch(plug_id));\n    dispatch(nft_fetch(socket_id));\n    return t.ok;\n  };\n\nexport const nft_recharge =\n  ({ id, amount }) =>\n  async (dispatch, getState) => {\n    let s = getState();\n\n    let identity = authentication.client.getIdentity();\n\n    let tid = tokenFromText(id);\n    let { slot } = decodeTokenId(tid);\n    // let canister = PrincipalFromSlot(s.user.map.space, slot).toText();\n    let address = s.user.address;\n\n    // let nftcan = nftCanister(canister, { agentOptions: authentication.getAgentOptions() });\n    let pwr = pwrCanister(\n      PrincipalFromSlot(\n        s.user.map.space,\n        AccountIdentifier.TextToSlot(address, s.user.map.pwr)\n      ),\n      {\n        agentOptions: authentication.getAgentOptions(),\n      }\n    );\n\n    let subaccount = [\n      AccountIdentifier.TextToArray(s.user.subaccount) || null,\n    ].filter(Boolean);\n\n    let t;\n    try {\n      let t = await pwr.nft_recharge(slot, {\n        user: { address: AccountIdentifier.TextToArray(address) },\n        token: tid,\n        subaccount,\n        amount,\n      });\n\n      if (!(\"ok\" in t)) throw t.err;\n\n      let { transactionId } = { transactionId: 0 }; //t.ok;\n\n      dispatch(user_refresh_balances());\n      dispatch(nft_fetch(id));\n      return t.ok;\n    } catch (e) {\n      console.error(\"Recharge error\", e);\n    }\n  };\n\nexport const nft_burn =\n  ({ id }) =>\n  async (dispatch, getState) => {\n    let s = getState();\n\n    let identity = authentication.client.getIdentity();\n\n    let tid = tokenFromText(id);\n    let { slot } = decodeTokenId(tid);\n    let canister = PrincipalFromSlot(s.user.map.space, slot).toText();\n\n    let nftcan = nftCanister(canister, {\n      agentOptions: authentication.getAgentOptions(),\n    });\n\n    let address = s.user.address;\n    let subaccount = [\n      AccountIdentifier.TextToArray(s.user.subaccount) || null,\n    ].filter(Boolean);\n\n    let rez = await nftcan.burn({\n      user: { address: AccountIdentifier.TextToArray(address) },\n      token: tid,\n      amount: 1,\n      memo: [],\n      subaccount,\n    });\n\n    if (rez.err) throw rez.err;\n\n    dispatch(user_refresh_balances());\n    let { transactionId } = rez.ok;\n    return rez.ok;\n  };\n\nexport const nft_approve =\n  ({ id, spender }) =>\n  async (dispatch, getState) => {\n    let s = getState();\n\n    let identity = authentication.client.getIdentity();\n    let tid = tokenFromText(id);\n    let { slot } = decodeTokenId(tid);\n    let canister = PrincipalFromSlot(s.user.map.space, slot).toText();\n\n    let nftcan = nftCanister(canister, {\n      agentOptions: authentication.getAgentOptions(),\n    });\n\n    let address = s.user.address;\n    let subaccount = [\n      AccountIdentifier.TextToArray(s.user.subaccount) || null,\n    ].filter(Boolean);\n\n    let rez = await nftcan.approve({\n      token: tid,\n      allowance: 1,\n      subaccount,\n      spender,\n    });\n    if (rez.err) throw rez.err;\n    dispatch(nft_fetch(id));\n\n    return rez.ok;\n  };\n\nexport const nft_use =\n  ({ id, use, memo }) =>\n  async (dispatch, getState) => {\n    let s = getState();\n\n    let identity = authentication.client.getIdentity();\n\n    let tid = tokenFromText(id);\n    let { slot } = decodeTokenId(tid);\n    let canister = PrincipalFromSlot(s.user.map.space, slot).toText();\n\n    let nftcan = nftCanister(canister, {\n      agentOptions: authentication.getAgentOptions(),\n    });\n\n    let address = s.user.address;\n    let subaccount = [\n      AccountIdentifier.TextToArray(s.user.subaccount) || null,\n    ].filter(Boolean);\n\n    let r = await nftcan.use({\n      user: { address: AccountIdentifier.TextToArray(address) },\n      token: tid,\n      memo,\n      use,\n      subaccount,\n      customVar: [],\n    });\n\n    if (!r.ok) throw r.err;\n    dispatch(user_refresh_balances());\n    dispatch(nft_fetch(id));\n    return r.ok;\n  };\n\nexport const nft_transfer_link =\n  ({ id }) =>\n  async (dispatch, getState) => {\n    let s = getState();\n\n    let identity = authentication.client.getIdentity();\n\n    let tid = tokenFromText(id);\n    let { index, slot } = decodeTokenId(tid);\n    let canister = PrincipalFromSlot(s.user.map.space, slot).toText();\n\n    let nftcan = nftCanister(canister, {\n      agentOptions: authentication.getAgentOptions(),\n    });\n\n    let address = s.user.address;\n    let subaccount = [\n      AccountIdentifier.TextToArray(s.user.subaccount) || null,\n    ].filter(Boolean);\n\n    let { key, hash } = generateKeyHashPair();\n\n    let rez = await nftcan.transfer_link({\n      from: { address: AccountIdentifier.TextToArray(address) },\n      hash: Array.from(hash),\n      token: tid,\n      subaccount,\n    });\n    if (rez.err) throw rez.err;\n\n    let code = encodeLink(slot, index, key);\n\n    return code;\n  };\n\nexport const nft_claim_link =\n  ({ code }) =>\n  async (dispatch, getState) => {\n    let s = getState();\n    let { slot, tokenIndex, key } = decodeLink(code);\n\n    let canister = PrincipalFromSlot(s.user.map.space, slot);\n\n    let identity = authentication.client.getIdentity();\n\n    let nftcan = nftCanister(canister, {\n      agentOptions: authentication.getAgentOptions(),\n    });\n\n    let address = s.user.address;\n\n    let tid = encodeTokenId(slot, tokenIndex);\n\n    let resp = await nftcan.claim_link({\n      to: { address: AccountIdentifier.TextToArray(address) },\n      key: Array.from(key),\n      token: tid,\n    });\n\n    dispatch(nft_fetch(tokenToText(tid)));\n\n    return resp;\n  };\n\nexport const nft_enter_code = (code) => async (dispatch, getState) => {\n  let s = getState();\n\n  let { slot, tokenIndex } = decodeLink(code);\n\n  if (!s.user.map.space) throw Error(\"Map not loaded\");\n\n  let canister = PrincipalFromSlot(s.user.map.space, slot);\n\n  let id = encodeTokenId(slot, tokenIndex);\n  return \"/\" + tokenToText(id) + \"/\" + code;\n};\n\nexport const nft_recharge_quote =\n  ({ id }) =>\n  async (dispatch, getState) => {\n    let s = getState();\n    const icpCycles = BigInt(s.user.oracle.icpCycles);\n\n    let nft = s.nft[id];\n\n    const ops = priceOps({ ttl: null }) / icpCycles;\n\n    const transfer = BigInt(s.user.oracle.pwrFee);\n\n    const storage =\n      priceStorage({\n        custom: nft.custom || 0,\n        content: nft.content,\n        thumb: nft.thumb,\n        quality: nft.quality,\n        ttl: null,\n      }) / icpCycles;\n\n    let full = ops + transfer + storage;\n\n    let current = BigInt(nft.pwr[0]) + BigInt(nft.pwr[1]);\n    let diff = full - current + BigInt(s.user.oracle.pwrFee);\n    if (diff < 30000n) diff = 0n;\n\n    //console.log({ full, current, diff });\n\n    return diff;\n  };\n\nexport const nft_mint_quote = (vals) => async (dispatch, getState) => {\n  let s = getState();\n\n  const icpCycles = BigInt(s.user.oracle.icpCycles);\n  const transfer = BigInt(s.user.oracle.pwrFee);\n  const ops = priceOps({ ttl: vals.ttl }) / icpCycles;\n\n  const storage =\n    priceStorage({\n      custom: 0, //NOTE: this frontend doesn't support custom data. If someone wants to add such, it should be done with scripts\n      content: vals.content,\n      thumb: vals.thumb,\n      quality: vals.quality,\n      ttl: vals.ttl,\n    }) / icpCycles;\n\n  return { transfer, ops, storage };\n};\n\nexport const nft_mint = (vals) => async (dispatch, getState) => {\n  let s = getState();\n  const key_nftstorage = s.user.key_nftstorage;\n\n  let available = s.user.map.nft_avail;\n  let slot = available[Math.floor(Math.random() * available.length)];\n\n  let canisterId = PrincipalFromSlot(s.user.map.space, slot);\n\n  let identity = authentication.client.getIdentity();\n  let address = s.user.address;\n\n  let nft = nftCanister(canisterId, {\n    agentOptions: authentication.getAgentOptions(),\n  });\n\n  let pwr = pwrCanister(\n    PrincipalFromSlot(\n      s.user.map.space,\n      AccountIdentifier.TextToSlot(address, s.user.map.pwr)\n    ),\n    {\n      agentOptions: authentication.getAgentOptions(),\n    }\n  );\n\n  // console.log(\n  //   \"PWR Canister\",\n  //   PrincipalFromSlot(\n  //     s.user.map.space,\n  //     AccountIdentifier.TextToSlot(address, s.user.map.pwr)\n  //   ).toText()\n  // );\n\n  // console.log(\n  //   \"NFT Canister\",\n  //   PrincipalFromSlot(s.user.map.space, slot).toText()\n  // );\n\n  let subaccount = [\n    AccountIdentifier.TextToArray(s.user.subaccount) || null,\n  ].filter(Boolean);\n\n  if (!address) throw Error(\"Annonymous cant mint\"); // Wont let annonymous mint\n\n  try {\n    // console.log(\"mint vals\", slot, vals);\n    let mrez = await pwr.nft_mint(BigInt(slot), {\n      user: { address: AccountIdentifier.TextToArray(address) },\n      subaccount,\n      metadata: vals,\n    });\n\n    if (mrez?.err?.OutOfMemory === null) {\n      await dispatch(user_refresh_config());\n      await dispatch(nft_mint(vals));\n      return;\n    }\n\n    if (mrez?.err?.InsufficientBalance === null) {\n      throw Error(\"Insufficient Balance\");\n    }\n    // console.log(\"REZ\", mrez);\n    if (!(\"ok\" in mrez)) throw Error(JSON.stringify(mrez.err));\n\n    let { tokenIndex, transactionId } = mrez.ok;\n    let id = tokenToText(encodeTokenId(slot, tokenIndex));\n\n    if (vals?.content[0]?.internal?.url) {\n      await uploadFile(\n        nft,\n        tokenIndex,\n        \"content\",\n        await chunkBlob(vals.content[0].internal.url),\n        subaccount\n      );\n    }\n\n    if (vals?.thumb?.internal?.url) {\n      await uploadFile(\n        nft,\n        tokenIndex,\n        \"thumb\",\n        await chunkBlob(vals.thumb.internal.url),\n        subaccount\n      );\n    }\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n\n  dispatch(user_refresh_balances());\n};\n\nexport default nftSlice.reducer;\n"],"file":"nft.js"}